import streamlit as st
import pandas as pd
import plotly.express as px

# Chargement des fichiers
@st.cache_data
def load_data():
    try:
        bact_df = pd.read_excel("TOUS_les_bacteries_a_etudier.xlsx")
        bact_df.rename(columns={"Category": "Esp√®ce"}, inplace=True)
    except Exception as e:
        st.error(f"Erreur de chargement des bact√©ries : {e}")
        bact_df = pd.DataFrame()

    try:
        tests_df = pd.read_csv("tests_par_semaine_antibiotiques_2024.csv")
    except Exception as e:
        st.error(f"Erreur de chargement des tests hebdomadaires : {e}")
        tests_df = pd.DataFrame()

    try:
        other_df = pd.read_excel("other Antibiotiques staph aureus.xlsx")
    except Exception as e:
        st.error(f"Erreur de chargement des autres antibiotiques : {e}")
        other_df = pd.DataFrame()

    return bact_df, tests_df, other_df

# Initialisation des donn√©es
bacteries_df, tests_df, other_df = load_data()

st.title("Tableau de bord ASTER ‚Äì Surveillance bact√©rienne")

if bacteries_df.empty:
    st.warning("Le fichier des bact√©ries est vide ou non charg√©.")
    st.stop()

# S√©lection de la bact√©rie
try:
    selected_bacterium = st.selectbox("ü¶† Bact√©ries disponibles", bacteries_df["Esp√®ce"].unique())
except KeyError:
    st.error("Colonne 'Esp√®ce' introuvable dans le fichier.")
    st.stop()

# Cr√©ation des onglets
tabs = st.tabs(["Alertes par service", "√âvolution r√©sistance", "Ph√©notypes"])

# Onglet 1 : Alertes par service
with tabs[0]:
    st.subheader("Alertes par service (bas√© sur r√®gle de Tukey sauf VRSA/Vancomycine)")

    if not tests_df.empty:
        alertes = []

        for ab in tests_df.columns[2:]:
            if ab.lower() in ["vrsa", "vancomycine"]:
                alertes.append((ab, tests_df[ab].sum()))
            else:
                q1 = tests_df[ab].quantile(0.25)
                q3 = tests_df[ab].quantile(0.75)
                iqr = q3 - q1
                seuil = q3 + 1.5 * iqr
                alertes.append((ab, (tests_df[ab] > seuil).sum()))

        alertes_df = pd.DataFrame(alertes, columns=["Antibiotique", "Nombre d'alertes"])
        st.dataframe(alertes_df)
    else:
        st.warning("Aucune donn√©e de tests hebdomadaires disponible.")

# Onglet 2 : √âvolution r√©sistance
with tabs[1]:
    st.subheader("√âvolution des r√©sistances par antibiotique")

    if not tests_df.empty:
        antibiotics = [col for col in tests_df.columns if col not in ["Semaine", "Esp√®ce"]]
        ab_option = st.selectbox("Choisir un antibiotique :", antibiotics)

        if ab_option in tests_df.columns:
            fig = px.line(tests_df, x="Semaine", y=ab_option,
                          title=f"% R√©sistance √† {ab_option}")
            st.plotly_chart(fig)
        else:
            st.error(f"Aucune donn√©e disponible pour {ab_option}.")
    else:
        st.warning("Aucune donn√©e de tests disponible.")

# Onglet 3 : Ph√©notypes
with tabs[2]:
    st.subheader("Ph√©notypes (alerte si VRSA ‚â• 1)")

    if not other_df.empty:
        ab_cols = [col for col in other_df.columns if col != "Semaine"]
        ab_option = st.selectbox("Choisir un antibiotique pour le ph√©notype :", ab_cols)

        if ab_option in other_df.columns:
            try:
                df = other_df[["Semaine", ab_option]].dropna()
                fig = px.bar(df, x="Semaine", y=ab_option, title=f"Ph√©notype - {ab_option}")
                st.plotly_chart(fig)
            except KeyError:
                st.error("Colonnes manquantes pour les ph√©notypes.")
        else:
            st.warning("Antibiotique non trouv√© dans les donn√©es de ph√©notypes.")
    else:
        st.warning("Aucune donn√©e de ph√©notypes charg√©e.")
